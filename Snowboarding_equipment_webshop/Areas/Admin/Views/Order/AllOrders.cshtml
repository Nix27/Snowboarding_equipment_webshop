@model IEnumerable<OrderVM>

@{
    ViewData["Title"] = "All orders";

    var page = (int)ViewData["page"];
    var size = (int)ViewData["size"];
    var pages = (int)ViewData["pages"];

    ViewData["action"] = "AllOrders";
}

<input id="hiddenData" data-size="@size"
       data-pages="@pages"
       data-url="OrderTableBodyPartial" hidden />

<div class="container p-2">
    <div class="row mb-4">
        <div class="col-12">
            <h2>All Orders</h2>
        </div>
    </div>

    @if (Model.Count() > 0)
    {
        <div class="d-flex justify-content-between mb-2">
            <div class="d-flex">
                <label for="filterBy" class="me-3 pt-1">Filter by:</label>
                <select id="filterBy">
                    <option value="none" selected>None</option>
                    <option value="approved">Approved</option>
                </select>
            </div>
            @* @await Component.InvokeAsync("Search") *@
        </div>

        <div class="table-responsive">
            <table id="order-table" class="w-100 table content">
                <partial name="_OrderTableBodyPartial" />
            </table>
        </div>
    }
    else
    {
        <h4 class="text-center">There is no items.</h4>
    }
</div>

@section Scripts{
    <partial name="_NotificationPartial" />
    <script src="~/js/pagination.js"></script>
    @* <script src="~/js/search-with-filtering.js" asp-append-version="true"></script> *@
}